{"version":3,"sources":["create-todo.js","todos-list-header.js","todos-list-item.js","todos-list.js","App.js","serviceWorker.js","index.js"],"names":["TodosList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","react_default","a","createElement","style","color","onSubmit","handleCreate","bind","type","placeholder","ref","renderError","event","preventDefault","task","refs","createInput","value","validateInput","setState","createTask","todos","find","todo","React","Component","TodosListHeader","TodosListItem","isEditing","_this$props","taskStyle","isCompleted","cursor","onSaveClick","defaultValue","onClick","toggleTask","onCancelClick","onEditClick","deleteTask","renderTaskSection","renderActionsSection","oldTask","newTask","editInput","saveTask","objectWithoutProperties","map","index","todos_list_item_TodosListItem","assign","key","todos_list_header_TodosListHeader","renderItems","App","create_todo_TodosList","todos_list_TodosList","foundTodo","push","taskToDelete","filtered","filter","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ffefec4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class TodosList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            error: null\r\n        };\r\n    }\r\n\r\n    renderError() {\r\n        if (!this.state.error) { return null;}\r\n\r\n        return <div style={{ color: 'red' }}>{this.state.error}</div>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleCreate.bind(this)}>\r\n                <input type=\"text\" placeholder=\"What do I do\" ref=\"createInput\" />\r\n                <button>Create</button>\r\n                {this.renderError()}\r\n            </form>\r\n        );\r\n    }\r\n\r\n    handleCreate(event) {\r\n        event.preventDefault();\r\n        const createInput = this.refs.createInput;\r\n        const task = createInput.value;\r\n        const validateInput = this.validateInput(task);\r\n\r\n        if (validateInput) {\r\n            this.setState({\r\n              error: validateInput\r\n            });\r\n            return;\r\n        }\r\n          this.setState({ error:null });\r\n          this.props.createTask(task);\r\n          this.refs.createInput.value = '';\r\n    }\r\n\r\n\r\n    validateInput(task){\r\n        if (!task) {\r\n          return 'Please enter a task';\r\n        } else if (this.props.todos.find( todo => todo.task === task)) {\r\n          return 'Task already exists';\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n    \r\n\r\n}","import React from 'react';\r\n\r\nexport default class TodosListHeader extends React.Component {\r\n    render() {\r\n        return (\r\n            <thread>\r\n                <tr>\r\n                    <th>Task</th>\r\n                    <th>Action</th>\r\n                </tr>\r\n            </thread>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class TodosListItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isEditing: false\r\n        };\r\n    }\r\n\r\n    renderTaskSection() {\r\n\r\n        const { task, isCompleted } = this.props;\r\n\r\n        const taskStyle = {\r\n            color: isCompleted ? 'green' : 'red',\r\n            cursor: 'pointer'\r\n        };\r\n\r\n        if(this.state.isEditing) {\r\n            return (\r\n                <td>\r\n                    <form onSubmit={this.onSaveClick.bind(this)}>\r\n                        <input type=\"text\" defaultValue={task} ref=\"editInput\" />\r\n                    </form>\r\n                </td>\r\n            );\r\n        }\r\n\r\n        return (\r\n           <td style={taskStyle}\r\n                onClick={this.props.toggleTask.bind(this, task)}\r\n            >\r\n                {task}\r\n            </td>    \r\n        );\r\n    }\r\n    renderActionsSection() {\r\n        if (this.state.isEditing) {\r\n            return (\r\n                <td>\r\n                    <button onClick={this.onSaveClick.bind(this)}>Save</button>\r\n                    <button onClick={this.onCancelClick.bind(this)}>Cancel</button>\r\n                </td>\r\n            );\r\n        }\r\n        return (\r\n            <td>\r\n                <button onClick={this.onEditClick.bind(this)}>Edit</button>\r\n                <button onClick={this.props.deleteTask.bind(this, this.props.task)}>Delete</button>\r\n            </td>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tr>\r\n                {this.renderTaskSection()}\r\n                {this.renderActionsSection()}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    onEditClick() {\r\n        this.setState({ isEditing:true });\r\n    }\r\n\r\n    onCancelClick() {\r\n        this.setState({ isEditing:false });\r\n    }\r\n\r\n    onSaveClick(event) {\r\n        event.preventDefault();\r\n\r\n        const oldTask = this.props.task;\r\n        const newTask = this.refs.editInput.value;\r\n        this.props.saveTask(oldTask, newTask);\r\n        this.setState({ isEditing: false });\r\n    }\r\n\r\n}","import React from 'react';\r\nimport TodosListHeader from './todos-list-header';\r\nimport TodosListItem from './todos-list-item';\r\n\r\nexport default class TodosList extends React.Component {\r\n    renderItems() {\r\n        const {todos, ...props} = this.props;\r\n\r\n        return this.props.todos.map( (todo, index) => <TodosListItem key={index} {...todo} {...props} /> );\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <table>\r\n              <TodosListHeader />\r\n              <tbody>\r\n                  {this.renderItems()}\r\n              </tbody>\r\n          </table>  \r\n        );\r\n    }\r\n    \r\n}","import React, { Component } from 'react';\r\nimport CreateTodo from './create-todo';\r\nimport TodosList from './todos-list';\r\n\r\nconst todos = [\r\n  {\r\n    task: 'hello world',\r\n    isCompleted: true\r\n  },\r\n  {\r\n    task: 'hello react',\r\n    isCompleted: false\r\n  }\r\n];\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todos\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>React TodDos App</h1>\r\n        <CreateTodo todos={this.state.todos} createTask={this.createTask.bind(this)} />\r\n        <TodosList\r\n          todos={this.state.todos}\r\n          toggleTask={this.toggleTask.bind(this)}\r\n          saveTask={this.saveTask.bind(this)}\r\n          deleteTask={this.deleteTask.bind(this)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  toggleTask(task) {\r\n    const foundTodo = this.state.todos.find( todo => todo.task === task);\r\n    foundTodo.isCompleted = !foundTodo.isCompleted;\r\n    this.setState({ todos: this.state.todos });\r\n  }\r\n\r\n  createTask(task) {\r\n    this.state.todos.push({\r\n      task,\r\n      isCompleted: false\r\n    });\r\n    this.setState({ todos: this.state.todos });\r\n  }\r\n\r\n  saveTask(oldTask, newTask) {\r\n    const foundTodo = this.state.todos.find( todo => todo.task === oldTask);\r\n    foundTodo.task = newTask;\r\n    this.setState({ todos: this.state.todos });\r\n  }\r\n\r\n  deleteTask(taskToDelete) {\r\n    \r\n    var filtered = this.state.todos.filter( (todo) => {\r\n      if(todo.task === taskToDelete)\r\n        return 0;  \r\n      else \r\n        return 1;    \r\n    } );\r\n\r\n    this.setState({ todos: filtered });\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}